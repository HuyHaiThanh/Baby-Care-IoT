# File: websocket_server.py
# WebSocket server cho vi·ªác g·ª≠i d·ªØ li·ªáu √¢m thanh v√† h√¨nh ·∫£nh theo th·ªùi gian th·ª±c

import asyncio
import websockets
import json
import base64
import datetime
import os
import time
import logging
import threading
from config import DEVICE_NAME, AUDIO_DIR, PHOTO_DIR, WEBSOCKET_PORT

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger('websocket_server')

# Danh s√°ch c√°c k·∫øt n·ªëi WebSocket ƒëang ho·∫°t ƒë·ªông
connected_clients = set()

async def send_audio_data(websocket, audio_file_path):
    """G·ª≠i d·ªØ li·ªáu √¢m thanh qua WebSocket"""
    try:
        # M√£ h√≥a file √¢m thanh th√†nh base64
        with open(audio_file_path, "rb") as audio_file:
            audio_data = audio_file.read()
            base64_audio = base64.b64encode(audio_data).decode('utf-8')
        
        # T·∫°o timestamp
        timestamp = datetime.datetime.now().isoformat()
        
        # T·∫°o t√™n file
        file_name = os.path.basename(audio_file_path)
        
        # ƒê√≥ng g√≥i message
        message = {
            "type": "audio",
            "data": base64_audio,
            "timestamp": timestamp,
            "device_name": DEVICE_NAME,
            "file_name": file_name
        }
        
        # G·ª≠i d·ªØ li·ªáu
        await websocket.send(json.dumps(message))
        logger.info(f"ƒê√£ g·ª≠i d·ªØ li·ªáu √¢m thanh: {file_name}")
        return True
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i d·ªØ li·ªáu √¢m thanh: {e}")
        return False

async def send_image_data(websocket, image_file_path, quality="high"):
    """
    G·ª≠i d·ªØ li·ªáu h√¨nh ·∫£nh qua WebSocket v·ªõi ch·∫•t l∆∞·ª£ng t√πy ch·ªânh
    
    Args:
        websocket: K·∫øt n·ªëi WebSocket
        image_file_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ·∫£nh
        quality: Ch·∫•t l∆∞·ª£ng ·∫£nh ("high", "medium", "low")
    """
    try:
        from PIL import Image
        import io
        
        # M·ªü ·∫£nh v√† n√©n theo ch·∫•t l∆∞·ª£ng
        with Image.open(image_file_path) as img:
            # ƒêi·ªÅu ch·ªânh ch·∫•t l∆∞·ª£ng v√† k√≠ch th∆∞·ªõc theo y√™u c·∫ßu
            if quality == "medium":
                # Gi·∫£m k√≠ch th∆∞·ªõc xu·ªëng 50% v√† n√©n v·ªõi ch·∫•t l∆∞·ª£ng 70%
                new_size = (img.width // 2, img.height // 2)
                img = img.resize(new_size, Image.Resampling.LANCZOS)
                compress_quality = 70
            elif quality == "low":
                # Gi·∫£m k√≠ch th∆∞·ªõc xu·ªëng 30% v√† n√©n v·ªõi ch·∫•t l∆∞·ª£ng 50%
                new_size = (img.width // 3, img.height // 3)
                img = img.resize(new_size, Image.Resampling.LANCZOS)
                compress_quality = 50
            else:
                # Ch·∫•t l∆∞·ª£ng cao - gi·ªØ nguy√™n k√≠ch th∆∞·ªõc, n√©n nh·∫π
                compress_quality = 85
            
            # L∆∞u ·∫£nh v√†o buffer v·ªõi ƒë·ªãnh d·∫°ng JPEG v√† n√©n
            buffer = io.BytesIO()
            img.convert('RGB').save(buffer, format="JPEG", quality=compress_quality)
            image_data = buffer.getvalue()
            
            # M√£ h√≥a th√†nh base64
            base64_image = base64.b64encode(image_data).decode('utf-8')
        
        # T·∫°o timestamp
        timestamp = datetime.datetime.now().isoformat()
        
        # T·∫°o t√™n file
        file_name = os.path.basename(image_file_path)
        
        # ƒê√≥ng g√≥i message
        message = {
            "type": "image",
            "data": base64_image,
            "timestamp": timestamp,
            "device_name": DEVICE_NAME,
            "file_name": file_name,
            "quality": quality
        }
        
        # G·ª≠i d·ªØ li·ªáu
        await websocket.send(json.dumps(message))
        logger.info(f"ƒê√£ g·ª≠i d·ªØ li·ªáu h√¨nh ·∫£nh: {file_name} (ch·∫•t l∆∞·ª£ng: {quality}, k√≠ch th∆∞·ªõc: {len(base64_image)//1024}KB)")
        return True
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i d·ªØ li·ªáu h√¨nh ·∫£nh: {e}")
        return False

async def handle_client(websocket, path=None):
    """X·ª≠ l√Ω k·∫øt n·ªëi t·ª´ client"""
    # L∆∞u client v√†o danh s√°ch k·∫øt n·ªëi
    connected_clients.add(websocket)
    client_info = f"{websocket.remote_address[0]}:{websocket.remote_address[1]}"
    logger.info(f"Client m·ªõi k·∫øt n·ªëi: {client_info}")
    print(f"\n===== K·∫æT N·ªêI M·ªöI =====")
    print(f"üîå Client {client_info} ƒë√£ k·∫øt n·ªëi")
    print(f"‚åö Th·ªùi gian: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"========================\n")
    
    try:
        # G·ª≠i th√¥ng b√°o k·∫øt n·ªëi th√†nh c√¥ng
        connection_message = {
            "type": "connection",
            "status": "connected",
            "message": f"K·∫øt n·ªëi th√†nh c√¥ng t·ªõi {DEVICE_NAME}",
            "device_name": DEVICE_NAME,
            "timestamp": datetime.datetime.now().isoformat()
        }
        await websocket.send(json.dumps(connection_message))
        
        # V√≤ng l·∫∑p ch√≠nh ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn
        while True:
            try:
                # Nh·∫≠n tin nh·∫Øn t·ª´ client
                message = await websocket.recv()
                data = json.loads(message)
                
                # In th√¥ng tin y√™u c·∫ßu nh·∫≠n ƒë∆∞·ª£c
                action = data.get("action", "unknown")
                print(f"\n----- Y√äU C·∫¶U T·ª™ CLIENT {client_info} -----")
                print(f"üîπ H√†nh ƒë·ªông: {action}")
                print(f"üîπ Th·ªùi gian: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
                # X·ª≠ l√Ω y√™u c·∫ßu t·ª´ client
                if action == "request_audio":
                    # Client y√™u c·∫ßu d·ªØ li·ªáu √¢m thanh m·ªõi nh·∫•t
                    print(f"üì¢ Y√äU C·∫¶U √ÇM THANH t·ª´ {client_info}")
                    
                    # T√¨m file √¢m thanh m·ªõi nh·∫•t trong th∆∞ m·ª•c
                    audio_files = [os.path.join(AUDIO_DIR, f) for f in os.listdir(AUDIO_DIR) 
                                  if f.endswith('.mp3') or f.endswith('.wav')]
                    if audio_files:
                        latest_audio = max(audio_files, key=os.path.getctime)
                        file_name = os.path.basename(latest_audio)
                        file_size = os.path.getsize(latest_audio) / 1024  # KB
                        
                        print(f"üîç T√¨m th·∫•y file √¢m thanh: {file_name} ({file_size:.1f} KB)")
                        print(f"üì§ ƒêang g·ª≠i √¢m thanh...")
                        
                        # G·ª≠i √¢m thanh
                        success = await send_audio_data(websocket, latest_audio)
                        
                        if success:
                            print(f"‚úÖ ƒê√É G·ª¨I TH√ÄNH C√îNG file √¢m thanh: {file_name}")
                        else:
                            print(f"‚ùå TH·∫§T B·∫†I khi g·ª≠i file √¢m thanh: {file_name}")
                    else:
                        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file √¢m thanh n√†o trong th∆∞ m·ª•c: {AUDIO_DIR}")
                        await websocket.send(json.dumps({
                            "type": "error",
                            "message": "Kh√¥ng c√≥ file √¢m thanh n√†o",
                            "timestamp": datetime.datetime.now().isoformat()
                        }))
                
                elif action == "request_image":
                    # Client y√™u c·∫ßu d·ªØ li·ªáu h√¨nh ·∫£nh m·ªõi nh·∫•t
                    # L·∫•y ch·∫•t l∆∞·ª£ng ·∫£nh t·ª´ y√™u c·∫ßu (m·∫∑c ƒë·ªãnh l√† "high")
                    quality = data.get("quality", "high")
                    print(f"üì∑ Y√äU C·∫¶U H√åNH ·∫¢NH t·ª´ {client_info} (Ch·∫•t l∆∞·ª£ng: {quality})")
                    
                    # Ki·ªÉm tra c√°c ƒë∆∞·ªùng d·∫´n thay th·∫ø ƒë∆∞·ª£c cung c·∫•p
                    paths = data.get("paths", [])
                    if paths:
                        print(f"üîç Client ƒë·ªÅ xu·∫•t c√°c ƒë∆∞·ªùng d·∫´n thay th·∫ø: {', '.join(paths)}")
                    
                    image_files = []
                    
                    # ƒê·∫ßu ti√™n th·ª≠ v·ªõi PHOTO_DIR m·∫∑c ƒë·ªãnh
                    print(f"üîç T√¨m ki·∫øm ·∫£nh trong th∆∞ m·ª•c m·∫∑c ƒë·ªãnh: {PHOTO_DIR}")
                    default_files = [os.path.join(PHOTO_DIR, f) for f in os.listdir(PHOTO_DIR) 
                                     if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
                    if default_files:
                        image_files = default_files
                        print(f"‚úÖ T√¨m th·∫•y {len(default_files)} file ·∫£nh trong th∆∞ m·ª•c m·∫∑c ƒë·ªãnh")
                    
                    # N·∫øu kh√¥ng c√≥ file trong th∆∞ m·ª•c m·∫∑c ƒë·ªãnh v√† client cung c·∫•p ƒë∆∞·ªùng d·∫´n thay th·∫ø
                    elif paths:
                        for path in paths:
                            try:
                                # Ki·ªÉm tra xem path l√† t∆∞∆°ng ƒë·ªëi hay tuy·ªát ƒë·ªëi
                                if os.path.isabs(path):
                                    check_path = path
                                else:
                                    check_path = os.path.normpath(os.path.join(os.path.dirname(__file__), path))
                                
                                print(f"üîç Ki·ªÉm tra th∆∞ m·ª•c thay th·∫ø: {check_path}")
                                
                                if os.path.exists(check_path) and os.path.isdir(check_path):
                                    alt_files = [os.path.join(check_path, f) for f in os.listdir(check_path)
                                                if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
                                    if alt_files:
                                        image_files = alt_files
                                        print(f"‚úÖ T√¨m th·∫•y {len(alt_files)} file ·∫£nh trong th∆∞ m·ª•c: {check_path}")
                                        break
                                    else:
                                        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o trong th∆∞ m·ª•c: {check_path}")
                                else:
                                    print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {check_path}")
                            except Exception as e:
                                print(f"‚ùå L·ªói khi ki·ªÉm tra th∆∞ m·ª•c {path}: {e}")
                    
                    # G·ª≠i ·∫£nh m·ªõi nh·∫•t n·∫øu t√¨m th·∫•y
                    if image_files:
                        latest_image = max(image_files, key=os.path.getctime)
                        file_name = os.path.basename(latest_image)
                        file_size = os.path.getsize(latest_image) / 1024  # KB
                        
                        print(f"üì§ ƒêang g·ª≠i ·∫£nh: {file_name} ({file_size:.1f} KB) v·ªõi ch·∫•t l∆∞·ª£ng {quality}...")
                        
                        # G·ª≠i ·∫£nh
                        start_time = time.time()
                        success = await send_image_data(websocket, latest_image, quality)
                        elapsed_time = time.time() - start_time
                        
                        if success:
                            print(f"‚úÖ ƒê√É G·ª¨I TH√ÄNH C√îNG file ·∫£nh: {file_name} trong {elapsed_time:.2f} gi√¢y")
                        else:
                            print(f"‚ùå TH·∫§T B·∫†I khi g·ª≠i file ·∫£nh: {file_name}")
                    else:
                        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o trong b·∫•t k·ª≥ th∆∞ m·ª•c n√†o")
                        await websocket.send(json.dumps({
                            "type": "error",
                            "message": "Kh√¥ng c√≥ file h√¨nh ·∫£nh n√†o",
                            "timestamp": datetime.datetime.now().isoformat()
                        }))
                
                elif action == "request_all":
                    # Client y√™u c·∫ßu c·∫£ h√¨nh ·∫£nh v√† √¢m thanh m·ªõi nh·∫•t
                    quality = data.get("quality", "high")
                    print(f"üîÑ Y√äU C·∫¶U T·∫§T C·∫¢ D·ªÆ LI·ªÜU t·ª´ {client_info} (Ch·∫•t l∆∞·ª£ng ·∫£nh: {quality})")
                    
                    # X·ª≠ l√Ω √¢m thanh
                    audio_files = [os.path.join(AUDIO_DIR, f) for f in os.listdir(AUDIO_DIR) 
                                  if f.endswith('.mp3') or f.endswith('.wav')]
                    if audio_files:
                        latest_audio = max(audio_files, key=os.path.getctime)
                        print(f"üì§ ƒêang g·ª≠i √¢m thanh: {os.path.basename(latest_audio)}...")
                        await send_audio_data(websocket, latest_audio)
                    else:
                        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file √¢m thanh n√†o")
                    
                    # X·ª≠ l√Ω h√¨nh ·∫£nh
                    image_files = [os.path.join(PHOTO_DIR, f) for f in os.listdir(PHOTO_DIR) 
                                  if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
                    if image_files:
                        latest_image = max(image_files, key=os.path.getctime)
                        print(f"üì§ ƒêang g·ª≠i ·∫£nh: {os.path.basename(latest_image)}...")
                        await send_image_data(websocket, latest_image, quality)
                    else:
                        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o")
                    
                    if not audio_files and not image_files:
                        print(f"‚ùå Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ file n√†o")
                        await websocket.send(json.dumps({
                            "type": "error",
                            "message": "Kh√¥ng c√≥ file n√†o",
                            "timestamp": datetime.datetime.now().isoformat()
                        }))
                else:
                    print(f"‚ùì Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c h√†nh ƒë·ªông: {action}")
                
                print(f"----- K·∫æT TH√öC Y√äU C·∫¶U -----\n")
                
            except json.JSONDecodeError:
                logger.warning(f"Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn kh√¥ng ph·∫£i JSON t·ª´ {client_info}")
                print(f"‚ö†Ô∏è Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn kh√¥ng ph·∫£i JSON t·ª´ {client_info}")
                await websocket.send(json.dumps({
                    "type": "error",
                    "message": "Tin nh·∫Øn ph·∫£i ·ªü ƒë·ªãnh d·∫°ng JSON",
                    "timestamp": datetime.datetime.now().isoformat()
                }))
            except Exception as e:
                logger.error(f"L·ªói x·ª≠ l√Ω tin nh·∫Øn t·ª´ {client_info}: {e}")
                print(f"‚ùå L·ªói x·ª≠ l√Ω tin nh·∫Øn t·ª´ {client_info}: {e}")
                break
                
    except websockets.exceptions.ConnectionClosed:
        logger.info(f"Client ƒë√£ ng·∫Øt k·∫øt n·ªëi: {client_info}")
        print(f"\n===== NG·∫ÆT K·∫æT N·ªêI =====")
        print(f"üîå Client {client_info} ƒë√£ ng·∫Øt k·∫øt n·ªëi")
        print(f"‚åö Th·ªùi gian: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"========================\n")
    except Exception as e:
        logger.error(f"L·ªói x·ª≠ l√Ω client {client_info}: {e}")
        print(f"‚ùå L·ªói x·ª≠ l√Ω client {client_info}: {e}")
    finally:
        # Lo·∫°i b·ªè client kh·ªèi danh s√°ch k·∫øt n·ªëi
        connected_clients.remove(websocket)

async def broadcast_audio(audio_file_path):
    """Ph√°t s√≥ng d·ªØ li·ªáu √¢m thanh t·ªõi t·∫•t c·∫£ c√°c client ƒëang k·∫øt n·ªëi"""
    if not connected_clients:
        logger.info("Kh√¥ng c√≥ client n√†o ƒëang k·∫øt n·ªëi ƒë·ªÉ g·ª≠i √¢m thanh")
        return
    
    # M√£ h√≥a file √¢m thanh th√†nh base64
    try:
        with open(audio_file_path, "rb") as audio_file:
            audio_data = audio_file.read()
            base64_audio = base64.b64encode(audio_data).decode('utf-8')
        
        # T·∫°o timestamp
        timestamp = datetime.datetime.now().isoformat()
        
        # T·∫°o t√™n file
        file_name = os.path.basename(audio_file_path)
        
        # ƒê√≥ng g√≥i message
        message = {
            "type": "audio",
            "data": base64_audio,
            "timestamp": timestamp,
            "device_name": DEVICE_NAME,
            "file_name": file_name
        }
        
        # Chuy·ªÉn message th√†nh JSON string
        json_message = json.dumps(message)
        
        # G·ª≠i t·ªõi t·∫•t c·∫£ clients
        disconnected_clients = set()
        
        for websocket in connected_clients:
            try:
                await websocket.send(json_message)
            except websockets.exceptions.ConnectionClosed:
                # ƒê√°nh d·∫•u client ƒë√£ ng·∫Øt k·∫øt n·ªëi ƒë·ªÉ lo·∫°i b·ªè sau
                disconnected_clients.add(websocket)
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i t·ªõi client: {e}")
                disconnected_clients.add(websocket)
        
        # Lo·∫°i b·ªè c√°c client ƒë√£ ng·∫Øt k·∫øt n·ªëi
        for client in disconnected_clients:
            connected_clients.remove(client)
            
        logger.info(f"ƒê√£ ph√°t s√≥ng √¢m thanh {file_name} t·ªõi {len(connected_clients)} client")
    except Exception as e:
        logger.error(f"L·ªói khi ph√°t s√≥ng √¢m thanh {audio_file_path}: {e}")

async def broadcast_image(image_file_path):
    """Ph√°t s√≥ng d·ªØ li·ªáu h√¨nh ·∫£nh t·ªõi t·∫•t c·∫£ c√°c client ƒëang k·∫øt n·ªëi"""
    if not connected_clients:
        logger.info("Kh√¥ng c√≥ client n√†o ƒëang k·∫øt n·ªëi ƒë·ªÉ g·ª≠i h√¨nh ·∫£nh")
        return
    
    # M√£ h√≥a file h√¨nh ·∫£nh th√†nh base64
    try:
        with open(image_file_path, "rb") as image_file:
            image_data = image_file.read()
            base64_image = base64.b64encode(image_data).decode('utf-8')
        
        # T·∫°o timestamp
        timestamp = datetime.datetime.now().isoformat()
        
        # T·∫°o t√™n file
        file_name = os.path.basename(image_file_path)
        
        # ƒê√≥ng g√≥i message
        message = {
            "type": "image",
            "data": base64_image,
            "timestamp": timestamp,
            "device_name": DEVICE_NAME,
            "file_name": file_name
        }
        
        # Chuy·ªÉn message th√†nh JSON string
        json_message = json.dumps(message)
        
        # G·ª≠i t·ªõi t·∫•t c·∫£ clients
        disconnected_clients = set()
        
        for websocket in connected_clients:
            try:
                await websocket.send(json_message)
            except websockets.exceptions.ConnectionClosed:
                # ƒê√°nh d·∫•u client ƒë√£ ng·∫Øt k·∫øt n·ªëi ƒë·ªÉ lo·∫°i b·ªè sau
                disconnected_clients.add(websocket)
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i t·ªõi client: {e}")
                disconnected_clients.add(websocket)
        
        # Lo·∫°i b·ªè c√°c client ƒë√£ ng·∫Øt k·∫øt n·ªëi
        for client in disconnected_clients:
            connected_clients.remove(client)
            
        logger.info(f"ƒê√£ ph√°t s√≥ng h√¨nh ·∫£nh {file_name} t·ªõi {len(connected_clients)} client")
    except Exception as e:
        logger.error(f"L·ªói khi ph√°t s√≥ng h√¨nh ·∫£nh {image_file_path}: {e}")

async def monitor_files():
    """Theo d√µi c√°c th∆∞ m·ª•c ƒë·ªÉ ph√°t hi·ªán file m·ªõi v√† ph√°t s√≥ng"""
    last_audio_time = 0
    last_image_time = 0
    
    while True:
        try:
            # Ki·ªÉm tra file √¢m thanh m·ªõi
            audio_files = [os.path.join(AUDIO_DIR, f) for f in os.listdir(AUDIO_DIR) 
                           if f.endswith('.mp3') or f.endswith('.wav')]
            if audio_files:
                latest_audio = max(audio_files, key=os.path.getctime)
                file_mtime = os.path.getmtime(latest_audio)
                
                if file_mtime > last_audio_time:
                    logger.info(f"Ph√°t hi·ªán file √¢m thanh m·ªõi: {os.path.basename(latest_audio)}")
                    await broadcast_audio(latest_audio)
                    last_audio_time = file_mtime
            
            # Ki·ªÉm tra file h√¨nh ·∫£nh m·ªõi
            image_files = [os.path.join(PHOTO_DIR, f) for f in os.listdir(PHOTO_DIR) 
                           if f.endswith('.jpg') or f.endswith('.png')]
            if image_files:
                latest_image = max(image_files, key=os.path.getctime)
                file_mtime = os.path.getmtime(latest_image)
                
                if file_mtime > last_image_time:
                    logger.info(f"Ph√°t hi·ªán file h√¨nh ·∫£nh m·ªõi: {os.path.basename(latest_image)}")
                    await broadcast_image(latest_image)
                    last_image_time = file_mtime
            
            # Ch·ªù m·ªôt l√°t tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
            await asyncio.sleep(1)  # Check every second
        except Exception as e:
            logger.error(f"L·ªói trong qu√° tr√¨nh monitor: {e}")
            await asyncio.sleep(5)  # Wait longer after an error

async def start_server(host='0.0.0.0', port=WEBSOCKET_PORT):
    """Kh·ªüi ƒë·ªông WebSocket server"""
    # T·∫°o c√°c th∆∞ m·ª•c l∆∞u tr·ªØ n·∫øu ch∆∞a t·ªìn t·∫°i
    os.makedirs(AUDIO_DIR, exist_ok=True)
    os.makedirs(PHOTO_DIR, exist_ok=True)
    
    # Kh·ªüi ƒë·ªông server v·ªõi handle_client tr·ª±c ti·∫øp
    server = await websockets.serve(handle_client, host, port)
    logger.info(f"WebSocket server ƒëang ch·∫°y t·∫°i ws://{host}:{port}")
    
    # Kh·ªüi ƒë·ªông monitor ƒë·ªÉ theo d√µi file m·ªõi
    asyncio.create_task(monitor_files())
    
    # Gi·ªØ server ch·∫°y
    await server.wait_closed()

def run_websocket_server(host='0.0.0.0', port=WEBSOCKET_PORT):
    """H√†m ch√≠nh ƒë·ªÉ kh·ªüi ƒë·ªông server t·ª´ b√™n ngo√†i"""
    try:
        asyncio.run(start_server(host, port))
    except KeyboardInterrupt:
        logger.info("WebSocket server ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông WebSocket server: {e}")

# H√†m ƒë·ªÉ ch·∫°y WebSocket server trong m·ªôt thread ri√™ng bi·ªát
def start_websocket_server_in_thread():
    """Ch·∫°y WebSocket server trong m·ªôt thread ri√™ng bi·ªát"""
    websocket_thread = threading.Thread(target=run_websocket_server)
    websocket_thread.daemon = True
    websocket_thread.start()
    return websocket_thread

if __name__ == "__main__":
    # Kh·ªüi ƒë·ªông server khi ch·∫°y file n√†y tr·ª±c ti·∫øp
    try:
        asyncio.run(start_server())
    except KeyboardInterrupt:
        logger.info("WebSocket server ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông server: {e}")